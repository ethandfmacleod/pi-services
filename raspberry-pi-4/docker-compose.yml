services:

  # General Flask API
  flask:
    build: ./flask
    ports:
      - "${FLASK_PORT}:5000"
    env_file:
      - .env
    environment:
      - WAKE_MAC_ADDRESS=${WAKE_MAC_ADDRESS}
    restart: unless-stopped

  # Postgres DB
  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
  
  # Time series data
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
    - ./prometheus-stack/prometheus.yml:/etc/prometheus/prometheus.yml
    - ./prometheus-stack/rules.yml:/etc/prometheus/rules.yml
    ports:
      - "${PROMETHEUS_PORT}:9090"
    networks:
      - localprom
    restart: unless-stopped

  # Exposes a larger selection of metrics for Prometheus
  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    ports:
      - "${NODE_EXPORTER_PORT}:9100"
    networks:
      - localprom
    restart: unless-stopped

  # Alert handling
  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    volumes:
      - ./alertmanager.yml:/alertmanager/alertmanager.yml
    environment:
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
    ports:
      - "${ALERTMANAGER_PORT}:9093"
    networks:
      - localprom
    restart: unless-stopped

  # Dashboards and monitoring
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "${GRAFANA_PORT}:3000"
    networks:
      - localprom
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped

networks:
  localprom:
    driver: bridge

volumes:
  grafana_data:
  postgres_data:
